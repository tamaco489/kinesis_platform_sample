// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/gen_sqlc/querier.go
//
// Generated by this command:
//
//	mockgen -source=./internal/repository/gen_sqlc/querier.go -package mock -destination=./internal/repository/gen_mock/mock_querier.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/tamaco489/kinesis_platform_sample/api/shop/internal/repository/gen_sqlc"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// CreateCharge mocks base method.
func (m *MockQuerier) CreateCharge(ctx context.Context, db repository.DBTX, arg repository.CreateChargeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharge", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCharge indicates an expected call of CreateCharge.
func (mr *MockQuerierMockRecorder) CreateCharge(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharge", reflect.TypeOf((*MockQuerier)(nil).CreateCharge), ctx, db, arg)
}

// CreateChargeProduct mocks base method.
func (m *MockQuerier) CreateChargeProduct(ctx context.Context, db repository.DBTX, arg repository.CreateChargeProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChargeProduct", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChargeProduct indicates an expected call of CreateChargeProduct.
func (mr *MockQuerierMockRecorder) CreateChargeProduct(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChargeProduct", reflect.TypeOf((*MockQuerier)(nil).CreateChargeProduct), ctx, db, arg)
}

// CreateReservation mocks base method.
func (m *MockQuerier) CreateReservation(ctx context.Context, db repository.DBTX, arg repository.CreateReservationParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockQuerierMockRecorder) CreateReservation(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockQuerier)(nil).CreateReservation), ctx, db, arg)
}

// CreateReservationProduct mocks base method.
func (m *MockQuerier) CreateReservationProduct(ctx context.Context, db repository.DBTX, arg repository.CreateReservationProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservationProduct", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservationProduct indicates an expected call of CreateReservationProduct.
func (mr *MockQuerierMockRecorder) CreateReservationProduct(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservationProduct", reflect.TypeOf((*MockQuerier)(nil).CreateReservationProduct), ctx, db, arg)
}

// CreateUser mocks base method.
func (m *MockQuerier) CreateUser(ctx context.Context, db repository.DBTX, arg repository.CreateUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockQuerierMockRecorder) CreateUser(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockQuerier)(nil).CreateUser), ctx, db, arg)
}

// ExistsChargeByReservationIDAndUserID mocks base method.
func (m *MockQuerier) ExistsChargeByReservationIDAndUserID(ctx context.Context, db repository.DBTX, arg repository.ExistsChargeByReservationIDAndUserIDParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsChargeByReservationIDAndUserID", ctx, db, arg)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsChargeByReservationIDAndUserID indicates an expected call of ExistsChargeByReservationIDAndUserID.
func (mr *MockQuerierMockRecorder) ExistsChargeByReservationIDAndUserID(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsChargeByReservationIDAndUserID", reflect.TypeOf((*MockQuerier)(nil).ExistsChargeByReservationIDAndUserID), ctx, db, arg)
}

// GetCreditCardsByUserId mocks base method.
func (m *MockQuerier) GetCreditCardsByUserId(ctx context.Context, db repository.DBTX, uid string) ([]repository.GetCreditCardsByUserIdRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreditCardsByUserId", ctx, db, uid)
	ret0, _ := ret[0].([]repository.GetCreditCardsByUserIdRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCreditCardsByUserId indicates an expected call of GetCreditCardsByUserId.
func (mr *MockQuerierMockRecorder) GetCreditCardsByUserId(ctx, db, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreditCardsByUserId", reflect.TypeOf((*MockQuerier)(nil).GetCreditCardsByUserId), ctx, db, uid)
}

// GetPendingReservationByIDAndUserID mocks base method.
func (m *MockQuerier) GetPendingReservationByIDAndUserID(ctx context.Context, db repository.DBTX, arg repository.GetPendingReservationByIDAndUserIDParams) ([]repository.GetPendingReservationByIDAndUserIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingReservationByIDAndUserID", ctx, db, arg)
	ret0, _ := ret[0].([]repository.GetPendingReservationByIDAndUserIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingReservationByIDAndUserID indicates an expected call of GetPendingReservationByIDAndUserID.
func (mr *MockQuerierMockRecorder) GetPendingReservationByIDAndUserID(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingReservationByIDAndUserID", reflect.TypeOf((*MockQuerier)(nil).GetPendingReservationByIDAndUserID), ctx, db, arg)
}

// GetProductByID mocks base method.
func (m *MockQuerier) GetProductByID(ctx context.Context, db repository.DBTX, productID uint32) (repository.GetProductByIDRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, db, productID)
	ret0, _ := ret[0].(repository.GetProductByIDRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockQuerierMockRecorder) GetProductByID(ctx, db, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockQuerier)(nil).GetProductByID), ctx, db, productID)
}

// GetProductsByIDs mocks base method.
func (m *MockQuerier) GetProductsByIDs(ctx context.Context, db repository.DBTX, productIds []uint32) ([]repository.GetProductsByIDsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByIDs", ctx, db, productIds)
	ret0, _ := ret[0].([]repository.GetProductsByIDsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByIDs indicates an expected call of GetProductsByIDs.
func (mr *MockQuerierMockRecorder) GetProductsByIDs(ctx, db, productIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByIDs", reflect.TypeOf((*MockQuerier)(nil).GetProductsByIDs), ctx, db, productIds)
}

// GetUserByUid mocks base method.
func (m *MockQuerier) GetUserByUid(ctx context.Context, db repository.DBTX, uid string) (repository.GetUserByUidRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUid", ctx, db, uid)
	ret0, _ := ret[0].(repository.GetUserByUidRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUid indicates an expected call of GetUserByUid.
func (mr *MockQuerierMockRecorder) GetUserByUid(ctx, db, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUid", reflect.TypeOf((*MockQuerier)(nil).GetUserByUid), ctx, db, uid)
}

// UpdateReservationStatus mocks base method.
func (m *MockQuerier) UpdateReservationStatus(ctx context.Context, db repository.DBTX, arg repository.UpdateReservationStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReservationStatus", ctx, db, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReservationStatus indicates an expected call of UpdateReservationStatus.
func (mr *MockQuerierMockRecorder) UpdateReservationStatus(ctx, db, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReservationStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateReservationStatus), ctx, db, arg)
}
