// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: products.sql

package repository

import (
	"context"
	"database/sql"
	"strings"
)

const getProductByID = `-- name: GetProductByID :one
SELECT 
  p.id AS product_id,
  p.name AS product_name,
  p.description,
  CAST(p.price * 100 AS UNSIGNED) AS price,
  p.vip_only,
  cm.name AS category_name,
  dm.name AS discount_name,
  dm.rate AS discount_rate,
  ps.stock_quantity,
  pi.image_url AS main_image_url,
  CAST(COALESCE(AVG(pr.rate), 0) AS UNSIGNED) AS average_rating,
  COUNT(pr.rate) AS rating_count
FROM products p
INNER JOIN category_master cm ON p.category_id = cm.id
LEFT JOIN discount_master dm ON p.discount_id = dm.id
INNER JOIN product_stocks ps ON p.id = ps.product_id
LEFT JOIN product_images pi ON p.id = pi.product_id AND pi.is_main = TRUE
LEFT JOIN product_ratings pr ON p.id = pr.product_id
WHERE p.id = ?
GROUP BY
  p.id, p.name, p.description, p.price, p.vip_only,
  cm.name, dm.name, dm.rate,
  ps.stock_quantity, pi.image_url
`

type GetProductByIDRow struct {
	ProductID     uint32         `json:"product_id"`
	ProductName   string         `json:"product_name"`
	Description   sql.NullString `json:"description"`
	Price         int64          `json:"price"`
	VipOnly       bool           `json:"vip_only"`
	CategoryName  string         `json:"category_name"`
	DiscountName  sql.NullString `json:"discount_name"`
	DiscountRate  sql.NullInt32  `json:"discount_rate"`
	StockQuantity uint32         `json:"stock_quantity"`
	MainImageUrl  sql.NullString `json:"main_image_url"`
	AverageRating int64          `json:"average_rating"`
	RatingCount   int64          `json:"rating_count"`
}

func (q *Queries) GetProductByID(ctx context.Context, db DBTX, productID uint32) (GetProductByIDRow, error) {
	row := db.QueryRowContext(ctx, getProductByID, productID)
	var i GetProductByIDRow
	err := row.Scan(
		&i.ProductID,
		&i.ProductName,
		&i.Description,
		&i.Price,
		&i.VipOnly,
		&i.CategoryName,
		&i.DiscountName,
		&i.DiscountRate,
		&i.StockQuantity,
		&i.MainImageUrl,
		&i.AverageRating,
		&i.RatingCount,
	)
	return i, err
}

const getProductsByIDs = `-- name: GetProductsByIDs :many
SELECT
  p.id AS product_id,
  FLOOR(p.price) AS product_price,
  dm.rate AS discount_rate,
  ps.stock_quantity AS product_stock_quantity
FROM products as p
INNER JOIN category_master as cm ON p.category_id = cm.id
INNER JOIN product_stocks as ps ON p.id = ps.product_id
LEFT JOIN discount_master as dm ON p.discount_id = dm.id
WHERE p.id IN (/*SLICE:product_ids*/?)
ORDER BY p.id
`

type GetProductsByIDsRow struct {
	ProductID            uint32        `json:"product_id"`
	ProductPrice         int32         `json:"product_price"`
	DiscountRate         sql.NullInt32 `json:"discount_rate"`
	ProductStockQuantity uint32        `json:"product_stock_quantity"`
}

func (q *Queries) GetProductsByIDs(ctx context.Context, db DBTX, productIds []uint32) ([]GetProductsByIDsRow, error) {
	query := getProductsByIDs
	var queryParams []interface{}
	if len(productIds) > 0 {
		for _, v := range productIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:product_ids*/?", strings.Repeat(",?", len(productIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:product_ids*/?", "NULL", 1)
	}
	rows, err := db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProductsByIDsRow
	for rows.Next() {
		var i GetProductsByIDsRow
		if err := rows.Scan(
			&i.ProductID,
			&i.ProductPrice,
			&i.DiscountRate,
			&i.ProductStockQuantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
