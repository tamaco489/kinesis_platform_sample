// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: credit_cards.sql

package repository

import (
	"context"
)

const getCreditCardsByUserId = `-- name: GetCreditCardsByUserId :many
SELECT
  user_id,
  payment_provider_card_id,
  provider_type,
  is_default
FROM credit_cards
WHERE user_id = ?
`

type GetCreditCardsByUserIdRow struct {
	UserID                string                  `json:"user_id"`
	PaymentProviderCardID string                  `json:"payment_provider_card_id"`
	ProviderType          CreditCardsProviderType `json:"provider_type"`
	IsDefault             bool                    `json:"is_default"`
}

func (q *Queries) GetCreditCardsByUserId(ctx context.Context, db DBTX, uid string) ([]GetCreditCardsByUserIdRow, error) {
	rows, err := db.QueryContext(ctx, getCreditCardsByUserId, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCreditCardsByUserIdRow
	for rows.Next() {
		var i GetCreditCardsByUserIdRow
		if err := rows.Scan(
			&i.UserID,
			&i.PaymentProviderCardID,
			&i.ProviderType,
			&i.IsDefault,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
